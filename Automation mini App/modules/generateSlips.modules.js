const fs = require("fs");
let i = 0;
module.exports.generateSlips = async function (dataFromDMG, pageERP) {
  console.log(`Let's start Dispatch Slips Generation.....`);
  // console.log(dataFromDMG[0]);
  let { writeExcelData } = require("./xlsx.module.js");

  // Enable request interception
  await pageERP.setRequestInterception(true);

  // Add event listener for "request" event
  pageERP.on("request", async (request) => {
    await handleRequest(request, dataFromDMG);
  });

  for (const toGenerateSlip of dataFromDMG) {
    const shortLogsArray = fs.readFileSync(
      "./backup/logs/shortLogs.txt",
      "utf-8"
    );

    if (
      shortLogsArray.includes(toGenerateSlip["Ravanna No"]) ||
      toGenerateSlip["Generated on"].includes("Error") ||
      toGenerateSlip["Remarks"]?.includes("Already Generated")
    ) {
      console.log(
        `Reason of Skipping ${toGenerateSlip["Ravanna No"]} is: ${toGenerateSlip["Remarks"]}`
      );
      continue;
    }

    console.log(
      `Going to Generate Slip For  \n${JSON.stringify(
        toGenerateSlip["Ravanna No"]
      )}`
    );
    await openPageToFillSlipForm(pageERP);

    await dataFiller(pageERP, toGenerateSlip);
    await delay(1000);

    await pageERP.click("#btnGenerateSlip", { delay: 200 });
    toGenerateSlip["Slip Generated by AutoScript"] = true;

    await delay(1000);

    // console.log(`Data Filler Ended.`);
    // console.log(`Step 1`);
    // let response = await pageERP.waitForResponse((response) =>
    //   response
    //     .url()
    //     .includes(
    //       "https://rajerp.rajasthan.gov.in/api/SMWeighBridge/GenerateTransferSlip?comeFrom=M"
    //     )
    // );
    // console.log(`Step 2`);
    // response = await response.json();
    // console.log(`Step 3`);
    // let responseStr = JSON.stringify(response);
    // console.log(`=-=-=-=-=-=-=-=-`);
    // console.log(response);
    // console.log(`=-=-=-=-=-=-=-=-`);
    // fs.writeFileSync(responseStr, "response String");
  }

  writeExcelData(dataFromDMG, "finalResult");
};

async function openPageToFillSlipForm(pageERP) {
  await pageERP.bringToFront();

  console.log(`in openPageToFillSlipForm`);
  await waitFor5MinuteAndClick("#btnGenerateDispatchSlip", pageERP);
  console.log("waiting for #btnGenerateDispatchSlip is compelete.");
  await pageERP.evaluate(() => {
    document
      .querySelector("#btnGenerateDispatchSlip")
      .scrollIntoView({ behavior: "smooth", block: "center" });
    let ele = Array.from(document.querySelectorAll("label")).find(
      (el) => el.textContent === "T.O."
    );
    ele.click();
  });
  console.log("cilcked #btnGenerateDispatchSlip.");
  await delay(500);

  await waitFor5MinuteAndClick("#export_table", pageERP);
  await waitFor5MinuteAndClick("#btnGenerateDispatchSlip", pageERP, `click`);
}
async function waitFor5MinuteAndClick(selector, pageERP, clickFlag) {
  let flag = await pageERP.waitForFunction(
    (selector) => !!document.querySelector(selector),
    {
      timeout: 300000,
    },
    selector
  );
  if (flag && clickFlag) {
    await pageERP.click(selector, { delay: 200 });
  }
  await pageERP.waitForNetworkIdle({ timeout: 300000 });
  await delay(1500);
}

async function dataFiller(pageERP, data) {
  const toNumber = data["TO No"];
  const vehicleNumber = data["Vehicle No"];
  const netWeight = data["Net Weight"];
  const rawannaNu = data["Ravanna No"];

  const plant = data["Plant"];
  const size = data["Size"].replace(`/`, `-`);
  console.log({ plant, size });

  await waitFor5MinuteAndClick("#toNumber", pageERP);

  await pageERP.evaluate((text) => {
    const element = document.querySelector("#toNumber");
    const options = Array.from(element.options);
    const option = options.find((opt) => opt.textContent.includes(text));
    if (option) {
      element.value = option.value;
      element.dispatchEvent(new Event("change", { bubbles: true }));
    }
  }, toNumber);

  const jsHandle = await pageERP.waitForFunction(() => {
    let location = document.querySelector("#fromStockLocation").value;
    let item = document.querySelector("#item").value;
    if (item && location) return { item, location };
    else return false;
  });

  const { item, location } = await jsHandle.jsonValue();

  console.log({ item, location });
  if (!compareStrings(location, plant)) {
    console.log("To Number's Plant is not matching.");
    return false;
  }
  if (!item.trim().toLowerCase().includes(size)) {
    console.log("To Number's size is not matching.");
    return false;
  }
  console.log(`item: ${item} , location:  ${location}.`);

  // const timeBefore = await pageERP.evaluate(
  //   () => document.querySelector("#inTimeTO").value
  // );
  // console.log(timeBefore);

  await pageERP.evaluate((selector) => {
    const element = document.querySelector(selector);
    element.scrollIntoView({ behavior: "smooth", block: "center" });
  }, "#vehicleNumber");

  await pageERP.type("#vehicleNumber", vehicleNumber, { delay: 100 });
  await pageERP.click('label[for="vehicleNumber"]', { delay: 200 });

  const jsHandle2 = await pageERP.waitForFunction(
    () => document.querySelector("#tareWeight").value
  );

  const tareWeight = await jsHandle2.jsonValue();

  await pageERP.type("#inWeight", tareWeight, { delay: 100 });
  await delay(1000);
  await pageERP.type("#netWeight", `${netWeight}`, { delay: 100 });
  await delay(1000);
  await pageERP.click('label[for="netWeight"]', { delay: 200 });
  await delay(1000);
  await pageERP.type("#rawanaNo", rawannaNu, { delay: 100 });
  await delay(1000);
  await pageERP.click('label[for="rawanaNo"]', { delay: 200 });
  await delay(1000);

  await pageERP.evaluate((genTime) => {
    genTime = genTime.replace(/:\d{2} /, ":00 ");
    document
      .querySelector("#inTimeTO")
      .scrollIntoView({ behavior: "smooth", block: "center" });

    document.querySelector("#inTimeTO").value = genTime;
    document.querySelector("#outTimeTO").value = genTime;
  }, `${data["Generated on"]}`);
  console.log(`${data["Generated on"]}`);

  // Take a full-page screenshot
  await pageERP.screenshot({
    path: `./backup/formScreenShots/${rawannaNu}.png`,
    fullpageERP: true,
  });
  await delay(1000);

  console.log(`All Slip data is filled. so going to next iteration.`);
  return true;
}
function compareStrings(str1, str2) {
  // Trim whitespace and convert to lowercase
  const formattedStr1 = str1.trim().toLowerCase();
  const formattedStr2 = str2.trim().toLowerCase();

  // Compare the formatted strings
  return formattedStr1 === formattedStr2;
}
async function delay(time) {
  return new Promise(function (resolve) {
    setTimeout(resolve, time);
  });
}

async function handleRequest(request, dataFromDMG) {
  if (!dataFromDMG) {
    console.log(
      `xlsx data is not available to handleRequest, Hence aborting the request.`
    );
    request.abort();
  }
  const urlToIntercept =
    "https://rajerp.rajasthan.gov.in/api/SMWeighBridge/GenerateTransferSlip?comeFrom=M";

  // console.log(request.url());

  // Check if the request is the one you want to intercept
  if (request.url() === urlToIntercept) {
    try {
      let postData = await request.postData();
      let requestBody = await JSON.parse(postData);

      const rawannaNu = requestBody.RawanaNumber;
      console.log(`In HandleRequest rawannaNu:${rawannaNu}.`);

      const currObj = dataFromDMG.find(
        (obj) => obj["Ravanna No"].trim() === rawannaNu.trim()
      );

      if (!currObj) {
        console.log(`Rawana Number of Web form doesn't found in dataFromDMG`);
      }
      // Modify the `InTime` and `OutTime` fields
      requestBody.InTime = currObj["Generated on"].replace(/:\d{2} /, ":00 ");
      requestBody.OutTime = currObj["Generated on"].replace(/:\d{2} /, ":00 ");

      // Convert the modified request body back to JSON
      const modifiedBody = JSON.stringify(requestBody);

      console.log(`modifiedBody: ${modifiedBody}`);
      fs.writeFileSync(`./backup/Requests/${rawannaNu}.json`, modifiedBody);

      log = `${rawannaNu} TO Dispatch Slip has been Generated, whose vehicle No.: ${
        requestBody.VehicleNumber
      }, In Time: ${requestBody.InTime}, Net wt.: ${
        requestBody.MaxCapacity - requestBody.TareWeight
      }.\n`;

      await request.continue({ postData: modifiedBody });

      fs.appendFileSync("./backup/logs/Logs.txt", log);
      fs.appendFileSync("./backup/logs/shortLogs.txt", `${rawannaNu}\n`);

      // await request.abort();
      console.log(` ------- Request Continued. with modified body`);
      // console.log(`request Aborted. with modified body`);
    } catch (error) {
      console.log(`Error occured: ${error.message}`);
      request.abort();
      console.log(`aborted.----------`);
      console.log(error);
    }
  } else {
    // Continue the request without modification
    request.continue();
    i++;
    process.stdout.clearLine();
    process.stdout.cursorTo(0);
    process.stdout.write(`Extra requests done ${i}`);
  }
}
